# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
#db.default.driver = org.h2.Driver
#db.default.url = "jdbc:h2:mem:play"
# db.default.username=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# play.evolutions.enabled=false

# You can disable evolutions for a specific datasource if necessary
# play.evolutions.db.default.enabled=false
# Or apply evolution by default
# applyEvolutions.default = true
play.evolutions.db.default.autoApply = true
# http://stackoverflow.com/questions/39869513/play-2-5-migration-com-google-inject-creationexception-unable-to-create-inject
# play.evolutions.enabled=false
# play.modules.disabled += "play.api.db.evolutions.EvolutionsModule"

app {
  client {
    runAsSimpleIRCChat = true
    runIRCBot = true
    onWebJoinNewIrcJoin = true
    adminPages = ["logs", "ircchat", "events"]
  }
  server {
    # data dir for pure logs and parsed logs
    dataDir = "data"

    # global user configuration - server side
    users {
      # use db to store user information - scripts, etc
      useDatabase = false
      # use dirs to store user infomration - scripts, etc
      useFiles = true
      # enable SeucureSocial, TODO
      authSecureSocialEnabled = true
      # enable web notification, TODO
      webBrowserNotifications = true
      # keep username as login
      keepUsernameAsLogin = true
      # admin user
      admins = ["27739871", "owner"]
      # default owner user
      owner {
        username = "owner"
        password = "password"
      }
    }
  }
  web {
    interface = "localhost"
    port = 9000
  }
  websocket = {
    # if you change this you need to change routes as well
    url = "ws://localhost:9000/chat"
  }
  irc {
    server = "localhost"
    defaultUserName = "defUser"
    # defaultChannel = "#TheName"
    defaultChannels = ["#TheName", "#TheName2"]
    welcomeMessage = "Welcome %user to channel %channel on server %server"
    # 60*60*24 , also new logs files are created for each irc bot start connection
    defaultLogRotationInterval = 86400
    # time
    defaultLogRotationIntervalStart = "TODO time"
  }
}

#application.langs = "en"
play.i18n.langs = ["en"]

# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
# https://github.com/jamesward/play-rest-security/
# play.crypto.secret="U3spB5^7L;EK_:<=OKxwpOJGM:0JsAyTu2pWhKsqbiGMO@tT_8voDNs:x7q=x?e<"
# play.crypto.secret = "changeme"
play.crypto.secret = ${?APPLICATION_SECRET}

play.modules.enabled += utils.DemoModule

application.global = settings.Global
shared.initial = "emptyString"

# https://github.com/alancnet/playtest/
play.server.http.port = 9000
http.port = 9000

# https://www.playframework.com/documentation/2.5.x/PlaySlick
# Default database configuration
slick.dbs.default.driver = "slick.driver.H2Driver$"
slick.dbs.default.db.driver = "org.h2.Driver"
slick.dbs.default.db.url = "jdbc:h2:mem:play"

# https://www.playframework.com/documentation/2.5.x/ScalaCsrf
play.http.filters = "filters.Filters"

# http://www.securesocial.ws/guide/configuration.html
include "securesocial.conf"
